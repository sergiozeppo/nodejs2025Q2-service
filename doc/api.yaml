openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - App
  /user:
    get:
      operationId: UsersController_getAll
      parameters: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
      summary: Get list of users
      tags:
        - Users
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Bad Request
      summary: Create a new user
      tags:
        - Users
  /user/{id}:
    get:
      operationId: UsersController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: User ID in UUID format
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid User ID
        '404':
          description: User not found
      summary: Get unique user by ID
      tags:
        - Users
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid User ID
        '404':
          description: User not found
      summary: Delete user
      tags:
        - Users
    put:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Bad Request
        '403':
          description: Forbidden - Incorrect old password
        '404':
          description: User not found
      summary: Update user password
      tags:
        - Users
  /album:
    get:
      operationId: AlbumsController_getAll
      parameters: []
      responses:
        '200':
          description: List of albums
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
      summary: Get list of albums
      tags:
        - Albums
    post:
      operationId: AlbumsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Bad Request
      summary: Create a new album
      tags:
        - Albums
  /album/{id}:
    get:
      operationId: AlbumsController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '200':
          description: Album found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Invalid Album ID
        '404':
          description: Album not found
      summary: Get unique album by ID
      tags:
        - Albums
    delete:
      operationId: AlbumsController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '204':
          description: Album deleted successfully
        '400':
          description: Invalid Album ID
        '404':
          description: Album not found
      summary: Delete album
      tags:
        - Albums
    put:
      operationId: AlbumsController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '200':
          description: Album updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponseDto'
        '400':
          description: Invalid Album ID
        '404':
          description: Album not found
      summary: Update album
      tags:
        - Albums
  /track:
    get:
      operationId: TracksController_getAll
      parameters: []
      responses:
        '200':
          description: List of tracks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
      summary: Get list of tracks
      tags:
        - Tracks
    post:
      operationId: TracksController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Bad Request
      summary: Create a new track
      tags:
        - Tracks
  /track/{id}:
    get:
      operationId: TracksController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '200':
          description: Track found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Invalid Track ID
        '404':
          description: Track not found
      summary: Get track by ID
      tags:
        - Tracks
    delete:
      operationId: TracksController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '204':
          description: Track deleted successfully
        '400':
          description: Invalid Track ID
        '404':
          description: Track not found
      summary: Delete track
      tags:
        - Tracks
    put:
      operationId: TracksController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '200':
          description: Track updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponseDto'
        '400':
          description: Invalid Track ID
        '404':
          description: Track not found
      summary: Update track
      tags:
        - Tracks
  /favs:
    get:
      operationId: FavoritesController_getAll
      parameters: []
      responses:
        '200':
          description: List of all favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
      summary: Get all favorites
      tags:
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '201':
          description: Artist added to favorites successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
        '400':
          description: Invalid artist ID or artist already in favorites
      summary: Add artist to favorites
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_deleteArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted from favorites successfully
        '400':
          description: Invalid artist ID
        '404':
          description: Artist not found in favorites
      summary: Delete artist from favorites
      tags:
        - Favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '201':
          description: Album added to favorites successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
        '400':
          description: Invalid album ID or album already in favorites
        '404':
          description: Album not found
      summary: Add album to favorites
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album UUID
          schema:
            type: string
      responses:
        '204':
          description: Album deleted from favorites successfully
        '400':
          description: Invalid album ID
        '404':
          description: Album not found in favorites
      summary: Delete album from favorites
      tags:
        - Favorites
  /favs/track/{id}:
    delete:
      operationId: FavoritesController_deleteTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '204':
          description: Track deleted from favorites successfully
        '400':
          description: Invalid track ID
        '404':
          description: Track not found in favorites
      summary: Delete track from favorites
      tags:
        - Favorites
    post:
      operationId: FavoritesController_addTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track UUID
          schema:
            type: string
      responses:
        '201':
          description: Track added to favorites successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
        '400':
          description: Invalid track ID or track already in favorites
      summary: Add track to favorites
      tags:
        - Favorites
  /artist:
    get:
      operationId: ArtistsController_getAll
      parameters: []
      responses:
        '200':
          description: List of artists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
      summary: Get list of artists
      tags:
        - Artists
    post:
      operationId: ArtistsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Bad Request
      summary: Create a new artist
      tags:
        - Artists
  /artist/{id}:
    get:
      operationId: ArtistsController_getById
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '200':
          description: Artist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid Artist ID
        '404':
          description: Artist not found
      summary: Get unique artist by ID
      tags:
        - Artists
    delete:
      operationId: ArtistsController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted successfully
        '400':
          description: Invalid Artist ID
        '404':
          description: Artist not found
      summary: Delete artist
      tags:
        - Artists
    put:
      operationId: ArtistsController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '200':
          description: Artist updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid Artist ID
        '404':
          description: Artist not found
      summary: Update artist
      tags:
        - Artists
info:
  title: Home Library Service
  description: API docs for Home Library Service
  version: v1.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 3f9c1b52-8d6e-4d99-9a3b-9e7cb9181f2a
          description: Unique identifier for the user.
        login:
          type: string
          example: your_name
          description: Login of the user
        version:
          type: number
          example: 1
          description: Version of the user record. Incremented on each update.
        createdAt:
          type: number
          example: 1816161651
          description: Timestamp of when the user was created.
        updatedAt:
          type: number
          example: 1816161652
          description: Timestamp of when the user was last updated.
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: your_name
          description: Login for the user. Must be unique and at least 1 character long.
        password:
          type: string
          example: your_password
          description: Password for the user. Must be at least 8 characters long.
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: 123Password
          description: Current password
        newPassword:
          type: string
          example: NewPassword123
          description: New password.
      required:
        - oldPassword
        - newPassword
    AlbumResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 3f9c1b52-8d6e-4d99-9a3b-9e7cb9181f2a
          description: Unique identifier for the album.
        name:
          type: string
          example: Nevermind
          description: Name of the album
        year:
          type: number
          example: 1991
          description: Year the album was released
        artistId:
          type: string
          example: a12f7c88-5b73-4c1a-a1c6-3bde9b95cf6e
          description: Unique identifier for the artist associated with the album.
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties: {}
    TrackResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 3f9c1b52-8d6e-4d99-9a3b-9e7cb9181f2a
          description: Unique identifier for the track.
        name:
          type: string
          example: Smells Like Teen Spirit
          description: Name of the track
        artistId:
          type: string
          example: 3f9c1b52-8d6e-4d99-9a3b-9e7cb9181f2a
          description: UUID of the artist associated with the track
        albumId:
          type: string
          example: 3f9c1b52-8d6e-4d99-9a3b-9e7cb9181f2a
          description: UUID of the album associated with the track
        duration:
          type: number
          example: 354
          description: Duration of the track in seconds
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties: {}
    FavoritesResponseDto:
      type: object
      properties:
        artists:
          example: []
          description: List of favorite artists
          type: array
          items:
            type: string
        albums:
          example: []
          description: List of favorite albums
          type: array
          items:
            type: string
        tracks:
          example: []
          description: List of favorite tracks
          type: array
          items:
            type: string
      required:
        - artists
        - albums
        - tracks
    ArtistResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 3f9c1b52-8d6e-4d99-9a3b-9e7cb9181f2a
          description: Unique identifier for the artist.
        name:
          type: string
          example: Nirvana
          description: Name of the artist
        grammy:
          type: boolean
          example: true
          description: Indicates if the artist has won a Grammy award
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties: {}
